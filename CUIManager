--sunyutao

CUIManager = class()

--每个窗口需要定义自己的层级类型
--不同层级的窗口有不同的基础规则（定制规则可以用参数控制），也就是层级是一类大的通用规则的分类
--FullScreen层级：窗口之间互斥(因为全屏窗口同时只可能有一个是可见的),
WindowLayer = {
	FullScreen = 1,--全屏
	Popup = 2,--弹出框,
	MassegeBox = 3,--对话框
	Tips = 4,
	System = 5
}

--窗口的打开过程可以使用预定义的动画效果
--使用的动画效果可以再三个地方定义，优先级：每次打开时的参数 > 每个窗口对象自定义属性 > 每个窗口所属层级的默认动画类型
WinAnimationType = {
	None = 0,
	FadeInOut = 1,--淡入、淡出
	ScaleInOut = 2,--弹出、缩回
	--.....
}

--每个层级默认的动画类型
DefultLayerWinAnimationType = {
	[WindowLayer.FullScreen] = WinAnimationType.FadeInOut,
	[WindowLayer.Popup] = WinAnimationType.FadeInOut,
	[WindowLayer.MassegeBox] = WinAnimationType.FadeInOut,
	[WindowLayer.Tips] = WinAnimationType.FadeInOut,
	[WindowLayer.System] = WinAnimationType.FadeInOut,
}

--窗口在整个生命周期中会触发的事件：
--供对窗口状态改变关心的监听者来监听
--例：比如说，有一个模块需要在每次“英雄预览”界面被打开的时候做一些逻辑，就可以监听“英雄预览”界面的“打开事件”
--例2：统计模块可以通过监听每个界面的打开事件，来做统计
WinEvent = {
	--一个窗口在生命周期中的6大生命周期事件：
	OnWinCreate = "OnWinCreate",--资源被创建
	OnWinShow = "OnWinShow",--窗口可见，此时窗口准备打开(资源加载完成,开始播放动画)
	OnWinStart = "OnWinStart",--窗口完全打开（播放动画结束)
	OnWinStop = "OnWinStop",--窗口被同级的窗口暂停时，或者窗口在关闭时播放关闭动画前
	OnWinClose = "OnWinClose",--窗口被关闭时，此时关闭动画播放结束，并出栈
	OnWinRelease = "OnWinRelease",--窗口资源被销毁时，一般发生在场景切换时（这个要依赖于资源管理器的实现）
	--注：六大生命周期函数是成对出现的：
	--在这六个事件触发的时候会触发对应窗口（CUIBase）的六个回调函数：
	--具体请参见CUIBase
	
	--
	OnWinBeOver = "OnWinBeOver",--当有更高层级的窗口在其“上”显示时，当前的则被Over
	OnWinReactived = "OnWinReactived",--窗口重新回到最可见高层级时被触发，也就是成为当前可操作的窗口
}

function CUIManager:ctor()
	
	--[[行为队列:tCommandQueue
		由于窗口的打开是一个过程（包括资源的异步加载和动画过程），
		所以在同一帧连续调用ShowWindow是没法同时进行的，需要排队.
		不然的话会造成同时Show两个不同的窗口时，实际的打开顺序依赖于谁的资源加载的快（回调先回来），而造成混乱。
		应该为谁先调用谁先被打开.
		同时，在同一时间show和close一个窗口会发生什么行为？如果不加入队列，也是不可控的。
	]]
	self.tCommandQueue = {}
	--窗口命令类型
	self.CommandType = {
		Show = 1,
		Close = 2,
		Back = 3,
		Clear = 4,
	}
	
	--窗口的实例缓存池
	self.WindowInstanceMap = {}
	
	--[[
		窗口栈:WindowMuiltyStack
		每个可视的层级维护一个单独的栈,
		当前有几个可视的Win，就有几个层级，也就是有几个栈
		每一级栈的栈顶元素就是当前这个层级的可视Win
		默认规则：
		打开新的Win的时候：
		如果新打开的窗口的层级小于或等于当前“激活的”窗口（也就是最高层级的栈的栈顶win），则在同层的栈入栈，同时隐藏原来同层的“激活的”Win，新打开的Win被设置成“激活的”
		如果新打开的窗口的层级大于当前“活动的”窗口，则在新的更高层的栈入栈，原来层级的栈顶Win因为还是可见的，所以不需要隐藏，新打开的Win被设置成“激活的”
		
		当然，由于可能存在一些特殊需求的窗口逻辑，打开新对话框时的遮挡关系，也可以通过Show时的参数tShowArg来控制，使其不受其默认定义的层级的控制。
		
	]]
	self.WindowMuiltyStack = {}
	
	--“正在打开”的窗口(因为第一次加载窗口资源是异步的)
	--self.OpeningWindow = nil
	--当前激活的Win
	self.ActivedWin = nil
	self.IsTouchEnbale = true
	
	
	--监听场景切换事件：因为在场景切换的时候会涉及的资源的加载和释放，所以需要做一些事情
	--GameDispatcher:AddListener(REPLACE_SCENE, self.onReplaceScene)
	--GameDispatcher:AddListener(REPLACE_SCENE_FINISH, self.onReplaceSceneFinish)
	--是否正在切换场景
	self.IsReplacingScene = false
	
	
	self.RunningOpeningAnimationInstance = nil
	self.RunningClosingAnimationInstance = nil
end



--Public:

--[[打开一个对话框:
	strWinID：要打开的窗口
	winArg：传递给窗口的参数
	showArg:控制窗口显示的参数
	
	tShowArg支持的参数：
		IsUsingToperLayer: 
			true:使用更高的层级打开窗口，效果就是在当前窗口之上打开新窗口，视觉上覆盖，但不影响当前窗口；
		IsUsingCurrentLayer:
			true:使用当前最高的层级打开窗口，效果就是新窗口的打开会隐藏当前活动的窗口（因为两个是同级）（IsUsingToperLayer优先级高于IsUsingToperLayer）
			
		AnimationType:
			此次打开窗口使用的动画类型
			
]]
function CUIManager:ShowWindow(strWinID,winArg,tShowArg)
	
	--插入处理队列
	local tShowCommand = {
		WinID = strWinID,
		WinArg = winArg,
		ShowArg = tShowArg,
		CommandType = self.CommandType.Show
	}
	
	self:InsertInCommandQueue(tShowCommand)
	
	--如果当前处理队列还有没结束的任务，退出，等待当前任务执行完再去执行
	if #self.tCommandQueue > 0 then
		--DEBUG_LOG("CUIManager:ShowWindow","Can Not Show Window When Another WinCommand Is Doing:",strWinID,self.tCommandQueue[1].WinID)
		return
	end
	
	--开启触控屏蔽（在开启窗口的过程中，禁止玩家操作）
	self:setIsTouchEnbale(false)
	
	--执行窗口任务
	self:processCommand(tShowCommand)
end


--[[function CUIManager:CloseWindow(strWinID)
	
	--默认关闭当前窗口
	if strWinID == nil then
		strWinID = self.ActivedWin
	end

end--]]

--关闭当前并返回上一个界面
function CUIManager:CloseBack()
	
	local tBackCommand = {
		CommandType = self.CommandType.Back
	}
	self:InsertInCommandQueue(tBackCommand)
	
	--如果当前处理队列还有没结束的任务，退出，等待当前任务执行完再去执行
	if #self.tCommandQueue > 0 then
		--DEBUG_LOG("CUIManager:CloseAndBack","Can Not CloseAndBack Window When Another WinCommand Is Doing:",strWinID,self.tCommandQueue[1].WinID)
		return
	end
	
	--开启触控屏蔽（在开启窗口的过程中，禁止玩家操作）
	self:setIsTouchEnbale(false)
	
	--执行窗口任务
	self:processCommand(tBackCommand)
end

--nDepth关闭哪一层，默认关闭最高层.正数从栈底开始，负数从栈顶开始数。比如，默认栈顶就是-1
function CUIManager:CloseLayer(nDepth)
	nDepth = nDepth or 0-1
	
	local tCloseCommand = {
		Depth = nDepth,
		CommandType = self.CommandType.Close
	}
	
	local tClearCommand = {
		Depth = nDepth,
		CommandType = self.CommandType.Clear
	}
	self:InsertInCommandQueue(tCloseCommand)
	
	self:InsertInCommandQueue(tClearCommand)
end


--获取当“可见”的的窗口列表,也就是获取每一级栈的栈顶元素
function CUIManager:GetVisibleWindows()
	
	local tWinIDList= {}
	
	for _,tWindowStack in ipairs(self.WindowMuiltyStack) do
		local nLenth = #tWindowStack
		if nLenth > 0 then
			table.insert(tWinIDList,tWindowStack[nLenth])
		end
	end
	
	return tWinIDList
end

--获取当“激活的”的窗口
function CUIManager:GetActivedWindow()
	return self.ActivedWin
end

--刷新当前可见的win
function CUIManager:RefreshWin(strWinID,winArg,tShowArg)
	
	local tWinClassInstance = self:GetWinClassInstance(strWinID)
	if tWinClassInstance == nil then
		return
	end
	
	if not tWinClassInstance:IsVisible() then
		return
	end
	
	--do something here to Refresh
end

--实例管理，整个系统的实例是怎么管理的？到时候统一一下
function CUIManager.GetInstance()
	--临时实现：
	local G_CUIManager = _G["G_CUIManager"]
	if _G["G_CUIManager"] == nil then
		G_CUIManager = CUIManager()
	end
	
	return G_CUIManager
end


--获取对话框的“类”（CUIBase实例）(单例)
function CUIManager:GetWinClassInstance(strWinID)
	local tWinClassInstance = self.WindowInstanceMap[strWinID]
	
	if tWinClassInstance == nil then
		local tModuleType = ModuleType[strWinID]
		local strClassName = tModuleType.ClassName
		require ("src/game/views/" .. strClassName)
		
		if _G[strClassName] == nil then
			DEBUG_LOG("CUIManager:ShowDialog","Can Not Find Window Class:",strWinID,strClassName)
		else
			--实例化
			local strResourceName = ModuleType[strWinID]["ResourceName"]
			tWinClassInstance = _G[strClassName](strWinID,strResourceName)
			
			--单例缓存起来
			self.WindowInstanceMap[strWinID] = tWinClassInstance
			
		end
	end
	
	return tWinClassInstance
end


--立刻清除所有
function CUIManager:ClearAllImmediately()
	
	--清除正在运行的动画
	if self.RunningOpeningAnimationInstance ~= nil then
		if self.RunningOpeningAnimationInstance.isStart then
			self.RunningOpeningAnimationInstance:Stop()
		end
		
		if self.RunningOpeningAnimationInstance:IsVisible() then
			self.RunningOpeningAnimationInstance:SetVisible(false)
		end
		
		if self.RunningOpeningAnimationInstance.isShow then
			self.RunningOpeningAnimationInstance:Close()
		end
	end
	if self.RunningClosingAnimationInstance ~= nil then
		if self.RunningClosingAnimationInstance.isStart then
			self.RunningClosingAnimationInstance:Stop()
		end
		
		if self.RunningClosingAnimationInstance:IsVisible() then
			self.RunningClosingAnimationInstance:SetVisible(false)
		end
		
		if self.RunningClosingAnimationInstance.isShow then
			self.RunningClosingAnimationInstance:Close()
		end
	end
	
	--清除tCommandQueue
	self.tCommandQueue = {}
	
	--清除栈
	local i = #self.WindowMuiltyStack
	while i > 1 do
		local tStack = self.WindowMuiltyStack[i]
		local j = #tStack
		while j > 1 do
			local tCom = tStack[j]
			local tInstance = self:GetWinClassInstance(tCom.WinID)
			if tInstance.isStart then
				tInstance:Stop()
			end
			
			if tInstance:IsVisible() then
				tInstance:SetVisible(false)
			end
			
			if tInstance.isShow then
				tInstance:Close()
			end
			j = j - 1
		end
		
		i = i - 1
	end
	
	
	self:setIsTouchEnbale(true)
end

--异步预加载
function CUIManager:GetPreLoader()
	local ModuleType = ModuleType
	
end

--同步预加载
function CUIManager:PreLoad()
	local ModuleType = ModuleType
	for strID,tData in pairs(ModuleType) do
		
	end
end


--private:-----------------------------------------------------------------------------------------------

function CUIManager:InsertInCommandQueue(tCommand)
	if self.IsReplacingScene then
		return
	end
	
	table.insert(self.tCommandQueue,tCommand)
	
	--如果当前处理队列还有没结束的任务，退出，等待当前任务执行完再去执行
	if #self.tCommandQueue > 0 then
		return
	end
	
	--开启触控屏蔽（在开启窗口的过程中，禁止玩家操作）
	self:setIsTouchEnbale(false)
	
	--执行窗口任务
	self:processCommand(tCommand)
end

--执行窗口任务
function CUIManager:processCommand(tCommand)
	
	if self.IsReplacingScene then
		return
	end
	
	if tCommand.CommandType == self.CommandType.Show then
		self:processShowCommand(tCommand)
	elseif tCommand.CommandType == self.CommandType.Close then
		self:processCloseCommand(tCommand)
	elseif tCommand.CommandType == self.CommandType.Back then
		self:processBackCommand(tCommand)
	else
		DEBUG_LOG("CUIManager:ShowDialog","Can Not Process No Defined Command Type:",tCommand.CommandType)
	end
end

--执行窗口打开任务
function CUIManager:processShowCommand(tShowCommand)
	
	local strWinID = tShowCommand.WinID
	
	--查找对话框定义
	local ModuleType = ModuleType
	local tModuleType = ModuleType[strWinID]
	if tModuleType == nil then
		DEBUG_LOG("CUIManager:ShowWindow","Can Not Find Window Define:",strWinID)
		return 
	end
	
	--获取并检测对话框关联的类实例
	local tWinClassInstance = self:GetWinClassInstance(strWinID)
	if tWinClassInstance == nil then
		return
	end
	
	for _,tWindowStack in ipairs(self.WindowMuiltyStack) do
		local nLenth = #tWindowStack
		for i,tShowCommand in ipairs(tWindowStack) do
			if i == nLenth then
				--对于当前“可见的”窗口，不需要重新打开
				if tShowCommand.WinID == strWinID then
					DEBUG_LOG("CUIManager:ShowWindow","This Win Is Actived:",strWinID)
					return
				end
			else
				--对于已经在栈中，将其关闭并从栈中移除
				if tShowCommand.WinID == strWinID then
					if tWinClassInstance:isStart then
						tWinClassInstance:Stop()
					elseif tWinClassInstance.isShow then
						tWinClassInstance:Close()
					end
					
					table.remove(tWindowStack,i)
				end
			end
			
		end
	end
	
	--
	
	if not tWinClassInstance.isInit then
		--加载资源
		local strUiResources = tWinClassInstance:GetUiResources()
		
		--资源加载完成回调
		local cb = function (uiObject)
			--资源死一次加载完成，执行初始化
			tWinClassInstance:InitResource(uiObject)
			
			self:doShow(tWinClassInstance,tShowCommand)
			
		end
		
		self:LoadUIRes(strUiResources,cb)
	else
		--已经加载
		
		self:doShow(tWinClassInstance,tShowCommand)
	end

end

--资源加载完成后真正的显示
function CUIManager:doShow(tWinClassInstance,tShowCommand)
	
	local tShowArg = tShowCommand.ShowArg
	local winArg = tShowCommand.WinArg
	
	--入栈
	local tLastSameLayerWinC = nil
	if tShowArg then
		--如果用户想手动控制显示方式，则使用用户自定义的参数
		if tShowArg.IsUsingToperLayer then
			tLastSameLayerWinC = self:pushStack(tShowCommand,false)
		elseif tShowArg.IsUsingCurrentLayer then
			tLastSameLayerWinC = self:pushStack(tShowCommand,true)
		end 
	else  
		--如果没有使用自定义规则，则按Win的默认层级规则显示
		local nLayer = tWinClassInstance:GetLayer()
		tLastSameLayerWinC = self:pushStackWithLayer(tShowCommand,nLayer)
	end
	
	tWinClassInstance:SetAsLastSibling()--这里利用unity的函数做了层级管理
	tWinClassInstance:SetVisible(true)
	tWinClassInstance:Show(winArg)
	
	self.ActivedWin = tShowCommand.WinID
	--播放窗口打开动画：
	self:playOpeningAnimation(tWinClassInstance,tShowCommand,tLastSameLayerWinC)

end


--设置是否响应点击事件
function CUIManager:setIsTouchEnbale(bCanTouch)
	
	self.IsTouchEnbale = bCanTouch
	--调用引擎相关接口
	--使屏幕不再相应点击事件
end

function CUIManager:LoadUIRes(strUiResources,fCallBack)
	
	--UIResLoadingManager没看过，不了解，
	--这里做了一个假设：
	--如果对于已经加载过的资源，UIResLoadingManager会直接从资源缓存里直接返回
	--也就是说资源的管理是UIResLoadingManager的职责，我这里不管，每次都去Load就好了。
	
	--[[
		--正常应该是这样简单地：
		UIResLoadingManager:LoadUIRes(strUiResources, fCallBack)
	]]
	
	--但是对于UIResLoadingManager这里有个需求就是，资源的Create和Release要通过事件通知出来，因为UI是对资源敏感的！
	--比如当资源第一次被加载的时候做一些初始化；
	--当资源被释放的时候（比若说切换场景、比如说因内存不足被系统释放），都要通知出来，要不UI层不知道的话会访问到已经释放的资源，会蹦！

end

--播放窗口打开动画
function CUIManager:playOpeningAnimation(tWinClassInstance,tShowCommand,tLastSameLayerWinC)
	--
	self.RunningOpeningAnimationInstance = tWinClassInstance
	local nAnimationType = nil
	
	if tShowCommand.AnimationType ~= nil then--优先使用本次调用的参数
		nAnimationType = tShowCommand.AnimationType
	elseif tWinClassInstance.AnimationType ~= nil then--使用编辑器里定义的动画类型
		nAnimationType = tWinClassInstance.AnimationType
	else
		--最后使用窗口所处层级的默认动画类型
		local nLayer = tWinClassInstance:GetLayer()
		nAnimationType = DefultLayerWinAnimationType[nLayer]
	end
	
	--记录下来
	tShowCommand.AnimationType = nAnimationType
	
	--然后根据动画类型，调用相关的动画，并设置回调函数为:onOpeningAnimationFinish
	--runAnimationWithCallback(nAnimationType,self.onOpeningAnimationFinish)
	
end

--播放窗口打开动画结束回调
function CUIManager:onOpeningAnimationFinish(tWinClassInstance,tShowCommand,tLastSameLayerWinC)
	self.RunningOpeningAnimationInstance = nil
	tWinClassInstance:Start(tShowCommand.WinArg)
	
	--当一个新的窗口被打开时：同级的上一个窗口被“隐藏”
	if tLastSameLayerWinC ~= nil then
		local tLastInstance = self:GetWinClassInstance(tLastSameLayerWinC.WinID)
		tLastInstance:SetVisible(false)
		tLastInstance:Stop()
	else
		--如果同层级的没有“上一个”，则上一个层级的的被Over
		local ndepth = self:getDepthOfStack()
		local tLastLayerStack = self.WindowMuiltyStack[ndepth - 1]
		if tLastLayerStack ~= nil then
			local tLastLayerTop = tLastLayerStack[#tLastLayerStack]
			if tLastLayerTop~= nil then
				local bOveredInstance = self:GetWinClassInstance(tLastLayerTop.WinID)
				self:postUIEevent(WinEvent.OnWinBeOver,tLastLayerTop.WinID)
			end
			
		end
	end
	
	self:CommpelateCommand()
end

--执行窗返回任务
function CUIManager:processBackCommand(tBackCommand)
		
	local tTop = self:popStack()
	if tTop == nil then
		return 
	end
	
	--显示同层级的上一个
	local tNewTop = getStackTop()
	if tNewTop and tNewTop.Depth == tTop.Depth then
		--
		local tNewTopInstance = self:GetWinClassInstance(tNewTop.WinID)
		tNewTopInstance:SetVisible(true)
		if not tNewTopInstance.isShow then
			tNewTopInstance:Show()
		end
		if not tNewTopInstance.isStart then
			tNewTopInstance:Start()
		end
		
		self:postUIEevent(WinEvent.OnWinReactived,tNewTop.WinID)
		
	end
	
	tBackCommand.AnimationType = tTop.AnimationType
	
	local tWinClassInstance = self:GetWinClassInstance(tTop.WinID)
	if tWinClassInstance.isStart then
		tWinClassInstance:Stop()
	end
	
	self:playClosingAnimation(tWinClassInstance,tBackCommand)
end

--执行窗口关闭任务
function CUIManager:processCloseCommand(tCloseCommand)
	local nCurrentDepth = self:getDepthOfStack()
	local nDepth = tCloseCommand.Depth
	
	local tStack = nil
	if nDepth > 0 then
		tStack = self.WindowMuiltyStack[nDepth]
	else
		tStack = self.WindowMuiltyStack[nCurrentDepth + nDepth +1]
	end
	
	if tStack == nil or #tStack < 1 then
		DEBUG_LOG("CUIManager:processCloseCommand","Over Depth:",nDepth,nCurrentDepth)
		return 
	end
	
	local tLayerTop = tStack[#tStack]
	
	tCloseCommand.AnimationType = tLayerTop.AnimationType
	
	local tWinClassInstance = self:GetWinClassInstance(tLayerTop.WinID)
	if tWinClassInstance.isStart then
		tWinClassInstance:Stop()
	end
	
	self:playClosingAnimation(tWinClassInstance,tCloseCommand)
	
end

--执行窗口清理任务
function CUIManager:processClearCommand(tClearCommand)
	local nCurrentDepth = self:getDepthOfStack()
	local nDepth = tClearCommand.Depth
	
	local tStack = nil
	if nDepth > 0 then
		tStack = self.WindowMuiltyStack[nDepth]
	else
		tStack = self.WindowMuiltyStack[nCurrentDepth + nDepth +1]
	end
	
	if tStack == nil then
		DEBUG_LOG("CUIManager:processCloseCommand","Over Depth:",nDepth,nCurrentDepth)
		return 
	end
	
	local i = #tStack
	while i > 1 do
		local tCom = tStack[i]
		local uiInstance = self:GetWinClassInstance(tCom.WinID)
		if uiInstance.isStart then
			uiInstance:Stop()
		end
		
		if uiInstance:IsVisible() then
			uiInstance:SetVisible(false)
		end
		
		if uiInstance.isShow then
			uiInstance:Close()
		end
		
		i = i - 1
	end
	
	
end

--播放窗口打开动画
function CUIManager:playClosingAnimation(tWinClassInstance,tCloseCommand)
	--
	self.RunningClosingAnimationInstance = tWinClassInstance
	local nAnimationType = tCloseCommand.AnimationType
	
	--然后根据动画类型，调用相关的动画，并设置回调函数为:onClosingAnimationFinish
	--runAnimationWithCallback(nAnimationType,self.onClosingAnimationFinish)
	
end

function CUIManager:onClosingAnimationFinish(tWinClassInstance,tCloseCommand)
	self.RunningClosingAnimationInstance = nil
	
	tWinClassInstance:SetVisible(false)
	
	if tWinClassInstance.isShow then
		tWinClassInstance:Close()
	end
	
	self:CommpelateCommand()
end

--结束任务
function CUIManager:CommpelateCommand()
	--一个完整的对话框打开流程终于走完了
	--从任务队列中弹出，继续处理下一个任务！
	table.remove(self.tCommandQueue,1)
	
	if #self.tCommandQueue > 0 then
		self:processCommand(tShowCommand[1])
	else
		--重新开启触控屏蔽
		self:setIsTouchEnbale(true)
	end
end

--抛出UI事件，供对UI状态改变关心的监听者来监听
function CUIManager:postUIEevent(strEvent,strWinID,...)
	
	--使用当前项目的事件分发系统
	GameDispatcher:DispatchEvent(strEvent,strWinID,...)
end


function CUIManager.onReplaceScene()
	local self = CUIManager.GetInstance()
	
	self.IsReplacingScene = true
	
	self:ClearAllImmediately()
end

function CUIManager:onReplaceSceneFinish()
	local self = CUIManager.GetInstance()
		
	self.IsReplacingScene = false
end

-------------
--栈操作接口：
-------------
--获取层数
function CUIManager:getDepthOfStack()
	return #self.WindowMuiltyStack
end

--获取层级最高的栈
--(注意！是获取最高层级的栈，不是获取栈顶元素)
function CUIManager:getTopStack()
	return self.WindowMuiltyStack[#self.WindowMuiltyStack]
end

--获取栈顶的元素(最高层级的栈的栈顶)
function CUIManager:getStackTop()
	local tTopElement = nil
	local tTopStack = self:getTopStack()
	if tTopStack then
		tTopElement = tTopStack[#tTopStack]
	end
	
	return tTopElement
end

--根据Win的层级，使用默认的层级规则入栈
function CUIManager:pushStackWithLayer(tShowCommand,nLayer)
	local tTopElement = self:getStackTop()
	if tTopElement == nil then
		--空栈，直接插入
		return self:pushStack(tShowCommand,true)
	end
	
	--获取上一个窗口的层级
	local tLastInstance = self:GetWinClassInstance(tTopElement.WinID)
	local nLastLayer = tLastInstance:GetLayer()
	
	--如果新打开的窗口的层级比上一个窗口的层级高，则用更高的层级打开新窗口
	--否则，在当前层级打开新窗口
	if nLayer > nLastLayer then
		return self:pushStack(tShowCommand,false)
	else
		return self:pushStack(tShowCommand,true)
	end
end

--入栈
function CUIManager:pushStack(tShowCommand,bInSameLayer)
	local tLastSameLayerCommand = nil
	
	bInSameLayer = bInSameLayer or true
	
	local nDepthOfStack = self:getDepthOfStack()
	if nDepthOfStack < 1 then
		--如果当前没有层级，只能添加在新建的层级
		self.WindowMuiltyStack[1] = {tShowCommand}
		
	else
		if bInSameLayer then
			--使用当前层级
			local tTopStack = self:getTopStack()
			tLastSameLayerCommand = tTopStack[#tTopStack]
			table.insert(tTopStack,tShowCommand)
		else
			--新建更高的层级
			local tNewTopStack = {}
			table.insert(tNewTopStack,tShowCommand)
			table.insert(self.WindowMuiltyStack,tNewTopStack)
		end
	end
	
	tShowCommand.Depth = #self.WindowMuiltyStack
	
	--返回被覆盖的上一个元素,先getStackTop再push也可以，这里返回为了方便
	return tLastSameLayerCommand
end


--入栈
function CUIManager:popStack()
	local tPop = nil
	local nDepthOfStack = self:getDepthOfStack()
	
	if nDepthOfStack < 1 then
		return nil
	end
	
	local tStack = self.WindowMuiltyStack[nDepthOfStack]
	if #tStack < 1 then
		return nil
	end
	
	tPop = tStack[#tStack]
	
	table.remove(tStack,#tStack)
	
	if #tStack < 1 then
		table.remove(self.WindowMuiltyStack,#self.WindowMuiltyStack)
	end
	
	return tPop
end



